def get_length(dna):
    """ (str) -> int

    Return the length of the DNA sequence dna.

    >>> get_length('ATCGAT')
    6
    >>> get_length('ATCG')
    4
    """
    return len(dna)
    

def is_longer(dna1, dna2):
    """ (str, str) -> bool

    Return True if and only if DNA sequence dna1 is longer than DNA sequence
    dna2.

    >>> is_longer('ATCG', 'AT')
    True
    >>> is_longer('ATCG', 'ATCGGA')
    False
    """
    return len(dna1)>len(dna2)
      

def count_nucleotides(dna, nucleotide):
    """ (str, str) -> int

    Return the number of occurrences of nucleotide in the DNA sequence dna.

    >>> count_nucleotides('ATCGGC', 'G')
    2
    >>> count_nucleotides('ATCTA', 'G')
    0
    """
    return dna.count(nucleotide)

def contains_sequence(dna1, dna2):
    """ (str, str) -> bool

    Return True if and only if DNA sequence dna2 occurs in the DNA sequence
    dna1.

    >>> contains_sequence('ATCGGC', 'GG')
    True
    >>> contains_sequence('ATCGGC', 'GT')
    False

    """
    return dna2 in dna1 
     
def is_valid_sequence (dna):
    ''' (str)-> boole

    return true if and only if the dna sequence is valid
    >>> is_valid_sequence('ATCG')
    True
    >>> is_valid_sequence('LTPROCKS')
    False
    '''

    for char in dna: 
     if char not in ('AGTC'):
        return False
    else :
        return True
     
def insert_sequence(dna1 , dna2 ,n):
   '''(str, str, int) -> str​
    Return the DNA sequence obtained by inserting dna2 into dna1 at the
     given index of num.

    >>> insert_sequence('CCGG', 'AT', 2)
    'CCATGG'
    >>> insert_sequence('ATCTAGCC', 'CAT', 5)
    'ATCTACATGCC'
    >>>insert_sequence('ATGGC', 'TA', 1)
    'ATATGGC'
   '''
   return dna1[:n]+dna2+dna1[n:]
def get_complement (nucleotide):
   '''(str) -> str​

   '''
   if nucleotide == 'A':
    return 'T'
   if nucleotide == 'T':
    return 'A'
   if nucleotide == 'C':
    return 'G'
   if nucleotide == 'G':
    return 'C'

def get_complementary_sequence(dna):
  '''
  (str) -> str​
  '''
  dna_complement =''
  for char in dna :
      dna_complement = dna_complement + get_complement(char)
  return dna_complement
